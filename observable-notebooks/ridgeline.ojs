/*
FileAttachments:
  traffic.csv: ./traffic.csv
*/

md`
# Hello Ridgeline

Ridgeline plots are an alternative to [horizon charts](/@mbostock/d3-horizon-chart) and small-multiple area charts that allow greater precision for a given vertical space at the expense of occlusion (overlapping areas).

This form is also known as a *joy plot* for its notable use on [the cover](/@mbostock/psr-b1919-21) of Joy Divisionâ€™s [*Unknown Pleasures* album](https://en.wikipedia.org/wiki/Unknown_Pleasures). This name is controversial as it references the [sexual slavery practices](https://en.wikipedia.org/wiki/German_military_brothels_in_World_War_II) of the Nazis during World War II. However, Joy Division sought to [draw attention to](http://aviewfromtheannex.blogspot.com/2010/04/no-joy-division-was-not-into-fascism.html) the danger of fascism to society, not to celebrate it.

Data: [Moritz Klack](/@moklick)
`

data = {
  const data = d3.csvParse(await FileAttachment("traffic.csv").text(), d3.autoType);
  const dates = Array.from(d3.group(data, d => +d.date).keys()).sort(d3.ascending);
  return {
    dates: dates.map(d => new Date(d)),
    series: d3.groups(data, d => d.name).map(([name, values]) => {
      const value = new Map(values.map(d => [+d.date, d.value]));
      return {name, values: dates.map(d => value.get(d))};
    })
  };
}

overlap = 8
height = data.series.length * 17
margin = ({top: 40, right: 20, bottom: 30, left: 120})
x = d3.scaleTime()
    .domain(d3.extent(data.dates))
    .range([margin.left, width - margin.right])

y = d3.scalePoint()
    .domain(data.series.map(d => d.name))
    .range([margin.top, height - margin.bottom])

z = d3.scaleLinear()
    .domain([0, d3.max(data.series, d => d3.max(d.values))]).nice()
    .range([0, -overlap * y.step()])

xAxis = g => g
  .attr("transform", `translate(0,${height - margin.bottom})`)
  .call(d3.axisBottom(x)
      .ticks(width / 80)
      .tickSizeOuter(0))

yAxis = g => g
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y).tickSize(0).tickPadding(4))
    .call(g => g.select(".domain").remove())

area = d3.area()
    .curve(d3.curveBasis)
    .defined(d => !isNaN(d))
    .x((d, i) => x(data.dates[i]))
    .y0(0)
    .y1(d => z(d))

line = area.lineY1()

chart = {
  const svg = d3.select(DOM.svg(width, height));

  svg.append("g")
      .call(xAxis);

  svg.append("g")
      .call(yAxis);
  
  const group = svg.append("g")
    .selectAll("g")
    .data(data.series)
    .join("g")
      .attr("transform", d => `translate(0,${y(d.name) + 1})`);

  group.append("path")
      .attr("fill", "#ddd")
      .attr("d", d => area(d.values));

  group.append("path")
      .attr("fill", "none")
      .attr("stroke", "black")
      .attr("d", d => line(d.values));

  return svg.node();
}
